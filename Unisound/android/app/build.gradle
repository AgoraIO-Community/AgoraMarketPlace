plugins {
    id 'com.android.application'
}
apply plugin: 'kotlin-android'

android {
    compileSdk 31

    defaultConfig {
        applicationId "io.agora.rte.extension.unisound"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    aaptOptions {
        ignoreAssetsPattern '!**'
    }
    packagingOptions {
        pickFirst '**/*.so'
    }
}

dependencies {
    implementation 'io.agora.rtc:full-sdk:4.0.0-rc.1'

    if (getLocalPluginPath(project) != null) {
        implementation project(':plugin')
    } else {
        // implement aar
        implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])
    }

    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.alibaba:fastjson:1.1.72.android'

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.2'
    implementation 'androidx.databinding:databinding-runtime:4.1.3'
}
repositories {
    mavenCentral()
}

static String getLocalPluginPath(Project project) {
    def rootProject = project.rootProject
    def localProperties = new Properties()
    def localPropertiesFile = rootProject.file('.plugin_dev.properties')
    if (!localPropertiesFile.exists()) {
        return null
    }

    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }

    def localPluginPath = localProperties.getProperty('local_plugin_path')
    if (localPluginPath == null) {
        throw new GradleScriptException("local_plugin_path not found. Define location with local_plugin_path in the .plugin_dev.properties file.")
    }

    return localPluginPath
}
